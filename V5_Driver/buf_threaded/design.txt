INHALTSVERZEICHNIS

1. Aufgabenstellung

2. Kontrollfluss

2.1 Schlafen legen und gegenseitiges Aufwecken

2.2 Spezialbehandlung der Lesethreads

3. Modellfluss

4. Analyse der gewaehlten Loesung



1. Aufgabenstellung

Das Programm buf_threaded soll einen Zugriff auf einen Puffer auf einer externen Hardware
simulieren, welcher ueber einen Treiber geschieht. Der Treiber beinhaltet einen fluechtigen Puffer
der ueber die Befehle read() und write() sowohl schreib- als auch lesbar ist.
Sowohl die Schreib- als die Lese-Anfragen koennen nicht nur ueber verschiedene Instanzen geschehen,
sondern soll auch multithreaded abgearbeitet werden.
Ist der Puffer voll und ein Schreibthread moechte weitere Daten in den Puffer schreiben, soll
dieser sich solange schlafen legen, bis wieder Platz frei ist.
Analog soll bei einem Lesethread vorgegangen werden: Solange es nichts zu lesen gibt, solange
soll der Lesethread schlafen gelegt werden.
Daten die schon gelesen wurden, sollen ausserdem ueberschrieben werden.
Somit simulieren wir ein klassisches Producer-/Consumer-Verhalten, wobei zu achten ist,
dass der Schreib-Thread eine hoehere Prioritaet hat.

2. Kontrollfluss

Fuer den Zugriff auf den internen Puffer wurde ein generischer Stack erstellt. Immer dann,
wenn ein Schreibthread auf den Stack etwas pushen oder ein Lesethread etwas poppen moechte,
wird innerhalb der genstack-Funktion, wenn auf den internen Stack zugegriffen wird, ein mutex_buffer
gelockt und kurz vor der Rueckgabe wieder entlockt, da mehrere Threads gleichzeitig pushen und
poppen koennten.

2.1 Schlafen legen und gegenseitiges Aufwecken

Die Bedingung fuer das Pushen in den Stack ist, dass freier Speicherplatz zur Verfuegung steht.
Ist diese Bedingung nicht gegeben, legt sich der Schreibthread schlafen. Dies wird mit einer
write waitqueue gemacht, die die Bedingung atomar prueft und beim Aufwecken nochmals die Bedingung
ueberprueft und sich ggf. wieder schlafen legt, falls diese nicht zutrifft.
Steht freier Speicherplatz zur Verfuegung (z. B., weil der Lesethread alle zu lesenden Daten
gelesen hat und diese wieder ueberschrieben werden koennen), pusht der Schreibthread 
seine Daten in den Puffer und weckt ueber eine read waitqueue die Lesethreads auf, die ggf. auf
den Schreibthread warten.
Sobald ein Lesethread ein Datum aus dem Stack gelesen hat, werden die Schreibthreads geweckt.
Gibt es keine Daten aus dem Stack (mehr) zu lesen, legt sich der Lesethread ueber eine read
waitqueue schlafen, der dann ggf. von einem Schreibthread wieder aufgeweckt wird sobald wieder
Daten im Stack liegen.

2.2 Spezialbehandlung der Lesethreads

Anders als bei den write-Threads werden bei den Lesethreads nicht direkt kthreads verwendet, sondern
eine Single-Thread-Workqueue. Dies hat folgende Vorteile:

- Die Prioritaet der Lesethreads ist dadurch automatisch niedriger, da sie nacheinander in der
  Workqueue abgearbeitet werden.
  
- Dadurch, dass die Lesethreads nacheinander abgearbeitet werden, hat man schon automatisch eine
  Synchronisation zwischen den Lesethreads. Es können nicht mehrere Lesethreads auf den Stack
  zugreifen.

Die Workqueue wird immer bei der read-Funktion angestoßen. Damit ein Lesethread das gelesene Datum
aus dem Stack der read-Funktion zurueckgeben kann, braucht es eine Synchronisation. Dies wird mit
einer waitqueue gemacht die auf eine atomare wake_up-Variable schlaeft und vom Lesethread gesetzt
wird. Anschließend weckt dieser die Task, die sich gerade in der read-Funktion befindet, auf.

Aehnliches gilt bei den Schreibthreads. Hier wird in der write-Funktion auf einem completion-Objekt,
die pro Instanz existiert, geschlafen der vom Schreibthread kurz vor Ende seiner Abarbeitung
inkrementiert wird, was den Task, der sich im write() befindet, dazu veranlasst aufzuwachen.

3. Modellfluss

Der Datenaustausch findet zwischen User- und Kernelspace in beiden Richtungen statt. Dabei ist
zu beachten in welchem Kontext der auszufuehrende Code sich gerade befindet. Der Zugriff auf den
Userspace ist naemlich nur im Prozesskontext moeglich. Die Gruende duerften technischer und
sicherheitsrelevanter Natur sein:

- Memory Management: Es wird i. d. R. immer nur mit logischen Adressen operiert, da dies eine
Voraussetzung fuer Swapping ist. D. h., dass verschiedene Prozesse dieselben logischen Adressen
besitzen koennen.
Da logische Adressen nicht eindeutig sind, koennen sie nur dem gerade laufendem Prozess zugeordnet
werden. Ein Kernel-Thread laeuft aber nicht unbedingt zur selben Zeit wie der Prozess X (unter
Einprozessorsystemen sowieso nicht). Folglich koennen so nicht Daten mit einer simplen logischen
Adresse in den Userspace des Prozesses X kopiert oder gelesen werden.

- Lebenszyklus: Ein Userspace-Prozess kann schon laengst beendet sein, wenn ein Kernelthread
versucht Daten aus dem User-Space zu lesen bzw. schreiben.

Aus den oben genannten Gruenden wird deshalb der Befehl copy_to_user() direkt in der read-Funktion
des Treibers aufgerufen, was natuerlich eine Synchronisation mit dem entsprechenden Lesethread
erfordert das die Daten aus dem Puffer liest. Der Lesethread kopiert dabei ein Datum aus dem Stack
in einer von read() uebergebenen Struktur, weckt diesen auf, woraufhin dann read() anschliessend
das Datum in den Userspace kopiert.

Analog wird beim Schreiben der Daten vorgegangen. Da auch hier die Daten aus dem Userspace kommen,
muessen die zu kopierenden Daten im Prozesskontext, also im write(), in einem Zwischenpuffer
(Struktur) kopiert und anschließend dem write-Thread uebergeben werden. Dieser pusht dann die Daten
in den Stack.

4. Analyse der gewaehlten Loesung

Die Synchronisation der read- und write-Funktionen mit den jeweiligen Kernelthreads verhindert
echte Asynchronitaet. Anfangs wollten wir die Userspace-Prozessen mit dem Error-Code -EBUSY
mitteilen, dass die Daten noch nicht gelesen bzw. geschrieben worden sind, bis schliesslich, nach n
weiteren Aurufen der read bzw. write Funktion, dem Userspace-Programm mitgeteilt wird, wie viele
bytes an Daten gelesen bzw. geschrieben wurden. Aus den im Kapitel "Modelfluss" genannten Gruenden
war diese Idee jedoch nicht umsetzbar.
Fuer weitere Performanceverbesserungen waere mmap() vorstellbar. Das Programm im Userspace haette
direkten Zugriff auf einen gemeinsam genutzten Speicherbereich, so dass keine Daten zwischen User-
und Kernelspace hin- und her kopiert werden muessten. Allerdings muessten diese sich miteinander
synchronisieren, was die Komplexitaet des Codes erhoehen wuerde.

4.1 Kritik

Als Kritik unserer Loesung ist anzumerken, dass gepoppte Daten unwiderruflich verloren gehen.
D. h., falls der Puffer aus dem Userspace nur n Bytes groß ist, das gepoppte Datum jedoch n + x
(x > 0), dann sind x Bytes unwiderruflich verloren gegangen.
